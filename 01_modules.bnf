// ### [ Syntactic part ] ######################################################

<< import (
	"github.com/llir/llvm/asm/internal/ast"
	"github.com/llir/llvm/asm/internal/astx"
) >>

// === [ Modules ] =============================================================

Module
	: TopLevelDecls   << astx.NewModule($0) >>
;

TopLevelDecls
	: empty
	| TopLevelDeclList
;

TopLevelDeclList
	: TopLevelDecl                    << astx.NewTopLevelDeclList($0) >>
	| TopLevelDeclList TopLevelDecl   << astx.AppendTopLevelDecl($0, $1) >>
;

TopLevelDecl
	: SourceFilename
	| TargetSpec
	| TypeDef
	| Global
	| FuncDecl
	| FuncDef
	| AttrGroupDef
	| NamedMetadataDef
	| MetadataDef
;

// === [ Source filename ] =====================================================

SourceFilename
	: "source_filename" "=" string_lit   << nil, nil >>
;

// === [ Target specifiers ] ===================================================

TargetSpec
	: "target" DataLayout     << nil, nil >>
	| "target" TargetTriple   << nil, nil >>
;

DataLayout
	: "datalayout" "=" string_lit
;

TargetTriple
	: "triple" "=" string_lit
;

// === [ Type definitions ] ====================================================

TypeDef
	: LocalIdent "=" "type" Type       << astx.NewTypeDef($0, $3) >>
	| LocalIdent "=" "type" "opaque"   << astx.NewTypeDefOpaque($0) >>
;

// === [ Global variables ] ====================================================

Global
	// global declaration.
	: GlobalIdent "=" ExternLinkage OptUnnamedAddr Immutable FirstClassType OptCommaAlign        << astx.NewGlobalDecl($0, $4, $5) >>
	// global definition.
	| GlobalIdent "=" OptLinkage OptUnnamedAddr Immutable FirstClassType Constant OptCommaAlign  << astx.NewGlobalDef($0, $4, $5, $6) >>
;

OptLinkage
	: empty
	| Linkage
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#linkage
Linkage
	: "appending"
	| "available_externally"
	| "common"
	| "internal"
	| "linkonce"
	| "linkonce_odr"
	| "private"
	| "weak"
	| "weak_odr"
;

OptExternLinkage
	: empty
	| ExternLinkage
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#linkage
ExternLinkage
	: "extern_weak"
	| "external"
;

OptUnnamedAddr
	: empty
	| UnnamedAddr
;

UnnamedAddr
	: "local_unnamed_addr"
	| "unnamed_addr"
;

Immutable
	: "constant"   << true, nil >>
	| "global"     << false, nil >>
;

OptCommaAlign
	: empty
	| "," Align
;

Align
	: "align" int_lit
;

// === [ Functions ] ===========================================================

FuncDecl
	: "declare" OptExternLinkage FuncHeader     << $2, nil >>
;

FuncDef
	: "define" OptLinkage FuncHeader FuncBody   << astx.NewFuncDef($2, $3) >>
;

FuncHeader
	: ParamAttrs Type GlobalIdent "(" Params ")" OptUnnamedAddr FuncAttrs OptAlign   << astx.NewFuncDecl($1, $2, $4) >>
;

ParamAttrs
	: empty
	| ParamAttrList
;

ParamAttrList
	: ParamAttr
	| ParamAttrList ParamAttr
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#parameter-attributes
ParamAttr
	: string_lit
	| string_lit "=" string_lit
	| Align
	| "byval"
	| "dereferenceable" "(" int_lit ")"
	| "dereferenceable_or_null" "(" int_lit ")"
	| "inalloca"
	| "inreg"
	| "nest"
	| "noalias"
	| "nocapture"
	| "nonnull"
	| "readnone" // NOTE: accepted by lli but not part of spec in v4.0
	| "readonly" // NOTE: accepted by lli but not part of spec in v4.0
	| "returned"
	| "signext"
	| "sret"
	| "swifterror"
	| "swiftself"
	| "writeonly" // NOTE: accepted by lli but not part of spec in v4.0
	| "zeroext"
;

Params
	: empty
	| "..."                 << astx.NewParams(nil, true) >>
	| ParamList             << astx.NewParams($0, false) >>
	| ParamList "," "..."   << astx.NewParams($0, true) >>
;

ParamList
	: Param                 << astx.NewParamList($0) >>
	| ParamList "," Param   << astx.AppendParam($0, $2) >>
;

Param
	: FirstClassType ParamAttrs              << astx.NewParam($0, nil) >>
	| FirstClassType ParamAttrs LocalIdent   << astx.NewParam($0, $2) >>
;

OptAlign
	: empty
	| Align
;

FuncBody
	: "{" BasicBlocks "}"   << $1, nil >>
;

// === [ Attribute group definitions ] =========================================

AttrGroupDef
	: "attributes" AttrGroupID "=" "{" FuncAttrs "}"   << nil, nil >>
;

FuncAttrs
	: empty
	| FuncAttrList
;

FuncAttrList
	: FuncAttr
	| FuncAttrList FuncAttr
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#function-attributes
FuncAttr
	: string_lit
	| string_lit "=" string_lit
	| AttrGroupID
	| "alignstack" "(" int_lit ")"
	| "allocsize" "(" int_lit OptAllocSizeNElems ")"
	| "alwaysinline"
	| "argmemonly"
	| "builtin"
	| "cold"
	| "convergent"
	| "inaccessiblemem_or_argmemonly"
	| "inaccessiblememonly"
	| "inlinehint"
	| "jumptable"
	| "minsize"
	| "naked"
	| "nobuiltin"
	| "noduplicate"
	| "noimplicitfloat"
	| "noinline"
	| "nonlazybind"
	| "norecurse"
	| "noredzone"
	| "noreturn"
	| "nounwind"
	| "optnone"
	| "optsize"
	| "readnone"
	| "readonly"
	| "returns_twice"
	| "safestack"
	| "sanitize_address"
	| "sanitize_memory"
	| "sanitize_thread"
	| "ssp"
	| "sspreq"
	| "sspstrong"
	| "uwtable"
	| "writeonly"
;

OptAllocSizeNElems
	: "," int_lit
;

// === [ Metadata definitions ] ================================================

NamedMetadataDef
	: MetadataName "=" "!" "{" MetadataIDs "}"   << nil, nil >>
;

MetadataIDs
	: empty
	| MetadataIDList
;

MetadataIDList
	: MetadataID
	| MetadataIDList "," MetadataID
;

MetadataDef
	: MetadataID "=" OptDistinct Metadata   << nil, nil >>
;

OptDistinct
	: empty
	| "distinct"
;

Metadata
	: "!" "{" MetadataNodes "}"
;

MetadataNodes
	: empty
	| MetadataNodeList
;

MetadataNodeList
	: MetadataNode
	| MetadataNodeList "," MetadataNode
;

MetadataNode
	: Metadata
	| MetadataID
	| "!" string_lit
	| Type Value
;

