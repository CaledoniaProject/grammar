// ### [ Helper productions ] ##################################################

OptLinkage
	: empty
	| Linkage
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#linkage
Linkage
	: "appending"
	| "available_externally"
	| "common"
	| "internal"
	| "linkonce"
	| "linkonce_odr"
	| "private"
	| "weak"
	| "weak_odr"
;

OptExternLinkage
	: empty
	| ExternLinkage
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#linkage
ExternLinkage
	: "extern_weak"
	| "external"
;

OptVisibility
	: empty
	| Visibility
;

// From spec of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#visibility-styles
Visibility
	: "default"
	| "hidden"
	| "protected"
;

OptDLLStorageClass
	: empty
	| DLLStorageClass
;

// From spec of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#dllstorageclass
DLLStorageClass
	: "dllimport"
	| "dllexport"
;

OptThreadLocal
	: empty
	| ThreadLocal
;

// From spec of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#thread-local-storage-models
ThreadLocal
	: "thread_local"
	| "thread_local" "(" TLSModel ")"
;

TLSModel
	: "localdynamic"
	| "initialexec"
	| "localexec"
;

OptUnnamedAddr
	: empty
	| UnnamedAddr
;

UnnamedAddr
	: "local_unnamed_addr"
	| "unnamed_addr"
;

OptSection
	: empty
	| Section
;

Section
	: "section" string_lit
;

OptComdat
	: empty
	| Comdat
;

Comdat
	: "comdat"
	| "comdat" "(" ComdatName ")"
;

OptAlign
	: empty
	| Align
;

Align
	: "align" IntLit
;

OptGC
	: empty
	| GC
;

GC
	: "gc" string_lit
;

OptPrefix
	: empty
	| Prefix
;

// ref: http://llvm.org/docs/LangRef.html#prefix-data
Prefix
	: "prefix" ConcreteType Constant
;

OptPrologue
	: empty
	| Prologue
;

// ref: http://llvm.org/docs/LangRef.html#prologue-data
Prologue
	: "prologue" ConcreteType Constant
;

OptPersonality
	: empty
	| Personality
;

// ref: http://llvm.org/docs/LangRef.html#personality-function
Personality
	: "personality" ConcreteType Constant
;

ParamAttrs
	: empty
	| ParamAttrList
;

ParamAttrList
	: ParamAttr
	| ParamAttrList ParamAttr
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#parameter-attributes
ParamAttr
	: string_lit
	| string_lit "=" string_lit
	| Align
	| "byval"
	| "dereferenceable" "(" IntLit ")"
	| "dereferenceable_or_null" "(" IntLit ")"
	| "inalloca"
	| "inreg"
	| "nest"
	| "noalias"
	| "nocapture"
	| "nonnull"
	| "readnone" // NOTE: accepted by lli but not part of spec in v4.0
	| "readonly" // NOTE: accepted by lli but not part of spec in v4.0
	| "returned"
	| "signext"
	| "sret"
	| "swifterror"
	| "swiftself"
	| "writeonly" // NOTE: accepted by lli but not part of spec in v4.0
	| "zeroext"
;

FuncAttrs
	: empty
	| FuncAttrList
;

FuncAttrList
	: FuncAttr
	| FuncAttrList FuncAttr
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#function-attributes
FuncAttr
	: string_lit
	| string_lit "=" string_lit
	| AttrGroupID
	| "alignstack" "=" IntLit // NOTE: only valid in attribute group definitions.
	| "alignstack" "(" IntLit ")"
	| "allocsize" "(" IntLit ")"
	| "allocsize" "(" IntLit "," IntLit ")"
	| "alwaysinline"
	| "argmemonly"
	| "builtin"
	| "cold"
	| "convergent"
	| "inaccessiblemem_or_argmemonly"
	| "inaccessiblememonly"
	| "inlinehint"
	| "jumptable"
	| "minsize"
	| "naked"
	| "nobuiltin"
	| "noduplicate"
	| "noimplicitfloat"
	| "noinline"
	| "nonlazybind"
	| "norecurse"
	| "noredzone"
	| "noreturn"
	| "nounwind"
	| "optnone"
	| "optsize"
	| "readnone"
	| "readonly"
	| "returns_twice"
	| "safestack"
	| "sanitize_address"
	| "sanitize_memory"
	| "sanitize_thread"
	| "ssp"
	| "sspreq"
	| "sspstrong"
	| "uwtable"
	| "writeonly"
;

Elems
	: empty
	| ElemList
;

ElemList
	: Elem                << astx.NewConstantList($0) >>
	| ElemList "," Elem   << astx.AppendConstant($0, $2) >>
;

Elem
	: ConcreteType Value   << astx.NewConstant($0, $1) >>
;

OptCallConv
	: empty      << ast.CallConvNone, nil >>
	| CallConv
;

// From spec and src of v4.0.
//
// ref: http://llvm.org/docs/LangRef.html#callingconv
CallConv
	: "amdgpu_cs"          << ast.CallConvAMDGPU_CS, nil >>
	| "amdgpu_gs"          << ast.CallConvAMDGPU_GS, nil >>
	| "amdgpu_kernel"      << ast.CallConvAMDGPU_Kernel, nil >>
	| "amdgpu_ps"          << ast.CallConvAMDGPU_PS, nil >>
	| "amdgpu_vs"          << ast.CallConvAMDGPU_VS, nil >>
	| "anyregcc"           << ast.CallConvAnyReg, nil >>
	| "arm_aapcs_vfpcc"    << ast.CallConvARM_AAPCS_VFP, nil >>
	| "arm_aapcscc"        << ast.CallConvARM_AAPCS, nil >>
	| "arm_apcscc"         << ast.CallConvARM_APCS, nil >>
	| "avr_intrcc"         << ast.CallConvAVR_Intr, nil >>
	| "avr_signalcc"       << ast.CallConvAVR_Signal, nil >>
	| "cc" IntLit          << astx.NewCallConv($1) >>
	| "ccc"                << ast.CallConvC, nil >>
	| "coldcc"             << ast.CallConvCold, nil >>
	| "cxx_fast_tlscc"     << ast.CallConvCXX_Fast_TLS, nil >>
	| "fastcc"             << ast.CallConvFast, nil >>
	| "ghccc"              << ast.CallConvGHC, nil >>
	| "hhvm_ccc"           << ast.CallConvHHVM_C, nil >>
	| "hhvmcc"             << ast.CallConvHHVM, nil >>
	| "intel_ocl_bicc"     << ast.CallConvIntel_OCL_BI, nil >>
	| "msp430_intrcc"      << ast.CallConvMSP430_Intr, nil >>
	| "preserve_allcc"     << ast.CallConvPreserveAll, nil >>
	| "preserve_mostcc"    << ast.CallConvPreserveMost, nil >>
	| "ptx_device"         << ast.CallConvPTX_Device, nil >>
	| "ptx_kernel"         << ast.CallConvPTX_Kernel, nil >>
	| "spir_func"          << ast.CallConvSPIR_Func, nil >>
	| "spir_kernel"        << ast.CallConvSPIR_Kernel, nil >>
	| "swiftcc"            << ast.CallConvSwift, nil >>
	| "webkit_jscc"        << ast.CallConvWebKit_JS, nil >>
	| "x86_64_sysvcc"      << ast.CallConvX86_64_SysV, nil >>
	| "x86_64_win64cc"     << ast.CallConvX86_64_Win64, nil >>
	| "x86_fastcallcc"     << ast.CallConvX86_FastCall, nil >>
	| "x86_intrcc"         << ast.CallConvX86_Intr, nil >>
	| "x86_regcallcc"      << ast.CallConvX86_RegCall, nil >>
	| "x86_stdcallcc"      << ast.CallConvX86_StdCall, nil >>
	| "x86_thiscallcc"     << ast.CallConvX86_ThisCall, nil >>
	| "x86_vectorcallcc"   << ast.CallConvX86_VectorCall, nil >>
;

InlineAsm
	: "asm" OptSideEffect OptAlignStack OptIntelDialect string_lit "," string_lit   << astx.NewInlineAsm($4, $6) >>
;

OptSideEffect
	: empty
	| "sideeffect"
;

OptAlignStack
	: empty
	| "alignstack"
;

OptIntelDialect
	: empty
	| "inteldialect"
;

Labels
	: empty
	| LabelList
;

LabelList
	: Label
	| LabelList "," Label
;

Label
	: LabelType LocalIdent
;

OptInbounds
	: empty
	| "inbounds"
;

AttachedMDs
	: empty
	| AttachedMDList
;

AttachedMDList
	: AttachedMD                  << astx.NewAttachedMDList($0) >>
	| AttachedMDList AttachedMD   << astx.AppendAttachedMD($0, $1) >>
;

AttachedMD
	: MetadataName MD   << astx.NewAttachedMD($0, $1) >>
;

MD
	: Metadata
	| MetadataID
;

OptCommaAttachedMDList
	: empty
	| CommaAttachedMDList
;

CommaAttachedMDList
	: "," AttachedMD                       << astx.NewAttachedMDList($1) >>
	| CommaAttachedMDList "," AttachedMD   << astx.AppendAttachedMD($0, $2) >>
;
