// === [ Types ] ===============================================================

Type
	: VoidType
	| FuncType
	| FirstClassType
;

FirstClassType
	: ConcreteType
	| MetadataType
;

ConcreteType
	: IntType
	| FloatType
	| PointerType
	| VectorType
	| LabelType
	| ArrayType
	| StructType
	| NamedType
;

// --- [ Void type ] -----------------------------------------------------------

VoidType
	: "void"   << &ast.VoidType{}, nil >>
;

// --- [ Function type ] -------------------------------------------------------

FuncType
	: Type "(" ParamTypes ")"   << astx.NewFuncType($0, $2) >>
;

ParamTypes
	: empty
	| "..."                     << astx.NewParams(nil, true) >>
	| ParamTypeList             << astx.NewParams($0, false) >>
	| ParamTypeList "," "..."   << astx.NewParams($0, true) >>
;

ParamTypeList
	: ParamType                     << astx.NewParamList($0) >>
	| ParamTypeList "," ParamType   << astx.AppendParam($0, $2) >>
;

ParamType
	: FirstClassType   << astx.NewParam($0, nil) >>
;

// --- [ Integer type ] --------------------------------------------------------

IntType
	: int_type   << astx.NewIntType($0) >>
;

// --- [ Floating-point type ] -------------------------------------------------

FloatType
	: "half"        << &ast.FloatType{Kind: ast.FloatKindIEEE_16}, nil >>
	| "float"       << &ast.FloatType{Kind: ast.FloatKindIEEE_32}, nil >>
	| "double"      << &ast.FloatType{Kind: ast.FloatKindIEEE_64}, nil >>
	| "fp128"       << &ast.FloatType{Kind: ast.FloatKindIEEE_128}, nil >>
	| "x86_fp80"    << &ast.FloatType{Kind: ast.FloatKindDoubleExtended_80}, nil >>
	| "ppc_fp128"   << &ast.FloatType{Kind: ast.FloatKindDoubleDouble_128}, nil >>
;

// --- [ Pointer type ] --------------------------------------------------------

PointerType
	: Type OptAddrSpace "*"   << astx.NewPointerType($0, $1) >>
;

OptAddrSpace
	: empty
	| "addrspace" "(" IntLit ")"   << $2, nil >>
;

// --- [ Vector type ] ---------------------------------------------------------

VectorType
	: "<" IntLit "x" ConcreteType ">"   << astx.NewVectorType($1, $3) >>
;

// --- [ Label type ] ----------------------------------------------------------

LabelType
	: "label"   << &ast.LabelType{}, nil >>
;

// --- [ Metadata type ] -------------------------------------------------------

MetadataType
	: "metadata"   << &ast.MetadataType{}, nil >>
;

// --- [ Array type ] ----------------------------------------------------------

ArrayType
	: "[" IntLit "x" ConcreteType "]"   << astx.NewArrayType($1, $3) >>
;

// --- [ struct type ] ---------------------------------------------------------

// TODO: Clean up when the parser generator no longer introduces ambiguities
// through the limitation of 1 token lookahead.
//
// Structured in this way to allow for naiive 1 token lookahead parser
// generators.
//
// Original production rule.
//
//    StructType
//       : "{" Fields "}"
//       | "<" "{" Fields "}" ">"
//    ;
//
//    Fields
//       : empty
//       | FieldList
//    ;
StructType
	: "{" "}"                     << astx.NewStructType(nil) >>
	| "{" FieldList "}"           << astx.NewStructType($1) >>
	| "<" "{" "}" ">"             << astx.NewStructType(nil) >>
	| "<" "{" FieldList "}" ">"   << astx.NewStructType($2) >>
;

FieldList
	: ConcreteType                 << astx.NewTypeList($0) >>
	| FieldList "," ConcreteType   << astx.AppendType($0, $2) >>
;

// --- [ Named type ] ----------------------------------------------------------

NamedType
	: LocalIdent   << astx.NewTypeIdent($0) >>
;

